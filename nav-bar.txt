<div style="padding: 20px">
  <h1>GMF CIAM Authentication Demo</h1>
  <div *ngIf="isLoading">
    <p>Loading...</p>
  </div>
  <div *ngIf="!isLoading">
    <div *ngIf="!isAuthenticated">
      <p>You are not logged in</p>
      <button (click)="loginButton()">Login</button>
      <div style="margin-top: 20px">
        <h3>Password Reset:</h3>
        <input 
          type="email" 
          [(ngModel)]="resetEmail" 
          placeholder="Enter your email"
          style="margin-right: 10px; padding: 5px;"
        />
        <button (click)="resetPassword()" [disabled]="!resetEmail">Reset Password</button>
        <div *ngIf="resetMessage" style="margin-top: 10px; padding: 10px; background-color: #f0f8ff; border-radius: 4px;">
          {{ resetMessage }}
        </div>
      </div>
    </div>
    <div *ngIf="isAuthenticated">
      <p>Welcome! You are logged in</p>
      <div style="margin-bottom: 20px;">
        <button (click)="logout()" style="margin-right: 10px;">Logout</button>
        <button (click)="refreshToken()">Refresh Token</button>
      </div>
      <div *ngIf="userProfile" style="margin-top: 20px">
        <h3>User Profile:</h3>
        <pre>{{ userProfile | json }}</pre>
      </div>
      <div *ngIf="tokenInfo" style="margin-top: 20px">
        <h3>Token Info:</h3>
        <p><strong>Access Token:</strong> {{ tokenInfo.accessToken ? '***Available***' : 'Not Available' }}</p>
        <p><strong>Token Expires At:</strong> {{ tokenInfo.expiresAt | date:'medium' }}</p>
        <p><strong>Time Until Expiry:</strong> {{ tokenInfo.timeUntilExpiry }}</p>
      </div>
    </div>
  </div>
</div>


import { Component, OnInit } from '@angular/core';
import { CommonModule, JsonPipe, DatePipe } from '@angular/common';
import { FormsModule } from '@angular/forms';
import GMFCIAMAuth, { AuthProvider, UserProfile } from 'GMF-CIAM-sdk';

// Define interfaces for type safety
interface TokenInfo {
  accessToken: string | null;
  expiresAt: Date | null;
  timeUntilExpiry: string;
}

interface Auth0Config {
  domain: string;
  clientId: string;
  audience: string;
  redirectUri: string;
  scope: string;
}

@Component({
  selector: 'app-root',
  standalone: true,
  imports: [CommonModule, JsonPipe, DatePipe, FormsModule],
  templateUrl: './app.component.html',
  styleUrl: './app.component.css'
})
export class AppComponent implements OnInit {
  authClient: AuthProvider | null = null;
  isAuthenticated: boolean = false;
  isLoading: boolean = true;
  userProfile: UserProfile | null = null;
  tokenInfo: TokenInfo | null = null;
  resetEmail: string = '';
  resetMessage: string = '';
  
  auth0Config: Auth0Config = {
    domain: 'dev-vfzstbs1dxkuagab.us.auth0.com',
    clientId: 'CP6smmR7f8NVud69LolHjy8YWSPUZ7g0',
    audience: 'https://dev-vfzstbs1dxkuagab.us.auth0.com/api/v2/', 
    redirectUri: window.location.origin,
    scope: 'openid profile email offline_access' // Added offline_access for refresh token
  };
  
  async ngOnInit() {
    await this.initializeAuth();
  }
  
  async initializeAuth() {
    try {
      // Create auth client with new package name
      this.authClient = await GMFCIAMAuth.createAuthProvider(
        'auth0',
        this.auth0Config
      );
      
      // Check authentication status (now async)
      this.isAuthenticated = await this.authClient.isAuthenticated();
      
      // If authenticated, get user profile and token info
      if (this.isAuthenticated) {
        try {
          this.userProfile = await this.authClient.getUserProfile();
          await this.updateTokenInfo();
          console.log('User is logged in:', this.userProfile);
        } catch (error) {
          console.error('Error getting user profile:', error);
          // If there's an error getting profile, user might not be properly authenticated
          this.isAuthenticated = false;
          this.authClient.logout();
        }
      } else {
        console.log('User is not logged in');
      }
    } catch (error) {
      console.error('Auth initialization error:', error);
    } finally {
      this.isLoading = false;
    }
  }
  
  async updateTokenInfo(): Promise<void> {
    try {
      if (this.authClient && this.isAuthenticated) {
        const accessToken = await this.authClient.getAccessToken();
        // Access expiresAt through the auth client instance
        const expiresAt = (this.authClient as unknown as { expiresAt: number | null }).expiresAt;
        const now = new Date().getTime();
        const timeUntilExpiry = expiresAt ? Math.max(0, Math.floor((expiresAt - now) / 1000 / 60)) : 0;
        
        this.tokenInfo = {
          accessToken: accessToken,
          expiresAt: expiresAt ? new Date(expiresAt) : null,
          timeUntilExpiry: timeUntilExpiry > 0 ? `${timeUntilExpiry} minutes` : 'Expired'
        };
      }
    } catch (error) {
      console.error('Error getting token info:', error);
    }
  }
  
  async loginButton(): Promise<void> {
    if (!this.authClient) {
      await this.initializeAuth();
    }
    
    if (this.authClient) {
      try {
        await this.authClient.login();
      } catch (error) {
        console.error('Login error:', error);
      }
    }
  }
  
  logout(): void {
    if (this.authClient) {
      this.authClient.logout();
      this.isAuthenticated = false;
      this.userProfile = null;
      this.tokenInfo = null;
    }
  }
  
  async refreshToken(): Promise<void> {
    if (this.authClient && this.isAuthenticated) {
      try {
        const success = await this.authClient.refreshToken();
        if (success) {
          console.log('Token refreshed successfully');
          await this.updateTokenInfo();
          // Optionally refresh user profile
          this.userProfile = await this.authClient.getUserProfile();
        }
      } catch (error) {
        console.error('Token refresh failed:', error);
        // If refresh fails, user might need to log in again
        this.isAuthenticated = false;
        this.userProfile = null;
        this.tokenInfo = null;
      }
    }
  }
  
  async resetPassword(): Promise<void> {
    if (!this.resetEmail) {
      this.resetMessage = 'Please enter an email address';
      return;
    }
    
    if (!this.authClient) {
      await this.initializeAuth();
    }
    
    if (this.authClient) {
      try {
        const result = await this.authClient.resetPassword(this.resetEmail);
        this.resetMessage = 'Password reset email sent successfully! Check your inbox.';
        console.log('Password reset result:', result);
      } catch (error) {
        const errorMessage = error instanceof Error ? error.message : 'Unknown error occurred';
        console.error('Password reset error:', error);
        this.resetMessage = `Password reset failed: ${errorMessage}`;
      }
    }
  }
}

....
main.ts

import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { provideHttpClient } from '@angular/common/http';
import { provideRouter } from '@angular/router';
import { Routes } from '@angular/router';

// Define routes directly here or keep it simple with just the main component
const routes: Routes = [
  {
    path: '',
    component: AppComponent
  },
  {
    path: '**',
    redirectTo: ''
  }
];

bootstrapApplication(AppComponent, {
  providers: [
    provideHttpClient(),
    provideRouter(routes)
  ]
}).catch(err => console.error(err));
