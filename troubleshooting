# Universal Auth SDK - Troubleshooting Guide

This guide helps address common issues with the Universal Auth SDK, particularly for the Auth0 provider.

## Login Button Not Redirecting to Auth0

If clicking the login button doesn't redirect to the Auth0 login page, follow these troubleshooting steps:

### Step 1: Check Console for Errors

Open your browser's developer console (F12) and look for any error messages. Common errors include:

- **"Missing required Auth0 configuration parameters"**: Ensure you've provided all required parameters (domain, clientId, audience).
- **Network errors**: Check if any network requests are failing.
- **JavaScript errors**: Look for any syntax or runtime errors.

### Step 2: Verify SDK Initialization

Make sure the SDK is properly loaded and initialized:

```javascript
// Add this debugging code
console.log('UniversalAuth available:', typeof UniversalAuth);
console.log('UniversalAuth methods:', UniversalAuth ? Object.keys(UniversalAuth) : 'N/A');
```

### Step 3: Check Auth0 Configuration

Double-check your Auth0 configuration:

1. **Domain**: Should be in the format `your-tenant.auth0.com` (check for typos)
2. **Client ID**: Should match your Auth0 application's client ID
3. **Audience**: Must be provided - usually in the format `https://your-tenant.auth0.com/api/v2/`
4. **Redirect URI**: Should match a URL in your Auth0 application's "Allowed Callback URLs"

### Step 4: Test with Direct Auth0 URL

Try manually constructing and navigating to the Auth0 login URL:

```javascript
const auth0Url = `https://${config.domain}/authorize?` +
  `client_id=${config.clientId}&` +
  `redirect_uri=${encodeURIComponent(config.redirectUri)}&` +
  `response_type=code&` +
  `scope=${encodeURIComponent('openid profile email')}&` +
  `audience=${encodeURIComponent(config.audience)}`;

console.log('Auth0 URL:', auth0Url);
window.location.href = auth0Url;
```

### Step 5: Check Auth0 Dashboard Settings

Verify your Auth0 application settings:

1. Application type should be "Single Page Application" or "Regular Web Application"
2. "Allowed Callback URLs" should include your redirectUri value
3. "Allowed Web Origins" should include your application's origin
4. Grant types should include "Authorization Code"

### Step 6: Test with a Minimal Example

Create a minimal test case to isolate the issue:

```html
<!DOCTYPE html>
<html>
<head>
    <title>Minimal Auth0 Test</title>
</head>
<body>
    <h1>Auth0 Test</h1>
    <button id="login">Login</button>
    
    <script src="node_modules/universal-auth/dist/universal-auth.js"></script>
    <script>
        document.getElementById('login').addEventListener('click', async () => {
            try {
                const auth0Config = {
                    domain: 'your-domain.auth0.com',
                    clientId: 'your-client-id',
                    audience: 'https://your-domain.auth0.com/api/v2/',
                    redirectUri: window.location.origin
                };
                
                console.log('Initializing Auth0 provider...');
                const authClient = await UniversalAuth.createAuthProvider('auth0', auth0Config);
                
                console.log('Calling login method...');
                await authClient.login();
                
                console.log('This should not be visible - redirect should have happened');
            } catch (error) {
                console.error('Error:', error);
            }
        });
    </script>
</body>
</html>
```

### Step 7: Check for Script Loading Issues

Ensure the SDK script is loaded before you try to use it:

1. Use browser dev tools to confirm the script loaded successfully
2. Try loading from a CDN or different location if needed
3. Move the script tag to the `<head>` and use `defer` attribute

### Step 8: Browser Security Features

Some browser security features might interfere with authentication:

1. Disable browser extensions temporarily
2. Test in an incognito/private window
3. Check if third-party cookies are blocked
4. Ensure you're using HTTPS for authentication flows

### Step 9: Fix for Login Not Redirecting

If the login method isn't working, try this direct approach:

```javascript
// Replace the login method with this direct approach
loginButton.addEventListener('click', () => {
    const authUrl = `https://${auth0Config.domain}/authorize?` +
        `client_id=${auth0Config.clientId}&` +
        `redirect_uri=${encodeURIComponent(auth0Config.redirectUri)}&` +
        `response_type=code&` +
        `scope=${encodeURIComponent('openid profile email')}&` +
        `audience=${encodeURIComponent(auth0Config.audience)}`;
    
    // Redirect to Auth0 login page
    window.location.assign(authUrl);
});
```

## Other Common Issues

### Callback Handling Problems

If you're redirected back to your application but not logged in:

1. Check if the URL contains an authorization code (`?code=...`)
2. Ensure the SDK is properly handling the callback
3. Look for any errors in the browser console
4. Verify the redirect URI matches exactly what's configured in Auth0

### "No authorization code found in URL" Error

This error occurs when the SDK is trying to process a callback without a code:

1. Make sure your Auth0 application's settings include the correct callback URL
2. Check if the OAuth flow is configured for Authorization Code flow (not Implicit)
3. Verify your Auth0 tenant is correctly set up and active

### Token Exchange Failures

If the code is received but token exchange fails:

1. Verify your Auth0 domain and client ID
2. Check network requests for detailed error responses
3. Ensure your Auth0 application's type matches your implementation
4. Verify your Auth0 tenant is in good standing and not rate-limited

### User Profile Not Loading

If login works but profile doesn't load:

1. Check if the access token is being properly stored
2. Verify the token has required scopes (`profile` and `email`)
3. Check network requests for errors when fetching profile
4.
